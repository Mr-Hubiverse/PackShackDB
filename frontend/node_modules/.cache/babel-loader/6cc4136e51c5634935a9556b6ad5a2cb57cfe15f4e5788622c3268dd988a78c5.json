{"ast":null,"code":"var _jsxFileName = \"/app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './styles/globals.css'; // shadcn/ui base styles\nimport './styles/index.css'; // your custom styles\nimport App from './App';\nimport { register as registerServiceWorker } from './components/serviceWorker';\nimport ErrorBoundary from './components/ErrorBoundary';\n\n// Environment-specific logging\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nif (process.env.NODE_ENV === 'development') {\n  console.log('Development mode: additional debug logging enabled.');\n  window.addEventListener('error', e => console.error('Global error:', e));\n  window.addEventListener('unhandledrejection', e => console.error('Unhandled rejection:', e));\n}\n\n// Conditionally register service worker for production\nif (process.env.NODE_ENV === 'production') {\n  registerServiceWorker();\n}\n\n// Create root element for React\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n// Render the App component inside StrictMode with ErrorBoundary\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 26,\n  columnNumber: 3\n}, this));","map":{"version":3,"names":["React","ReactDOM","App","register","registerServiceWorker","ErrorBoundary","jsxDEV","_jsxDEV","process","env","NODE_ENV","console","log","window","addEventListener","e","error","root","createRoot","document","getElementById","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/app/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './styles/globals.css';  // shadcn/ui base styles\nimport './styles/index.css';    // your custom styles\nimport App from './App';\nimport { register as registerServiceWorker } from './components/serviceWorker';\nimport ErrorBoundary from './components/ErrorBoundary';\n\n// Environment-specific logging\nif (process.env.NODE_ENV === 'development') {\n  console.log('Development mode: additional debug logging enabled.');\n  window.addEventListener('error', e => console.error('Global error:', e));\n  window.addEventListener('unhandledrejection', e => console.error('Unhandled rejection:', e));\n}\n\n// Conditionally register service worker for production\nif (process.env.NODE_ENV === 'production') {\n  registerServiceWorker();\n}\n\n// Create root element for React\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n// Render the App component inside StrictMode with ErrorBoundary\nroot.render(\n  <React.StrictMode>\n    <ErrorBoundary>\n      <App />\n    </ErrorBoundary>\n  </React.StrictMode>\n);\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,sBAAsB,CAAC,CAAE;AAChC,OAAO,oBAAoB,CAAC,CAAI;AAChC,OAAOC,GAAG,MAAM,OAAO;AACvB,SAASC,QAAQ,IAAIC,qBAAqB,QAAQ,4BAA4B;AAC9E,OAAOC,aAAa,MAAM,4BAA4B;;AAEtD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;EAC1CC,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;EAClEC,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAEC,CAAC,IAAIJ,OAAO,CAACK,KAAK,CAAC,eAAe,EAAED,CAAC,CAAC,CAAC;EACxEF,MAAM,CAACC,gBAAgB,CAAC,oBAAoB,EAAEC,CAAC,IAAIJ,OAAO,CAACK,KAAK,CAAC,sBAAsB,EAAED,CAAC,CAAC,CAAC;AAC9F;;AAEA;AACA,IAAIP,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;EACzCN,qBAAqB,CAAC,CAAC;AACzB;;AAEA;AACA,MAAMa,IAAI,GAAGhB,QAAQ,CAACiB,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;;AAEjE;AACAH,IAAI,CAACI,MAAM,cACTd,OAAA,CAACP,KAAK,CAACsB,UAAU;EAAAC,QAAA,eACfhB,OAAA,CAACF,aAAa;IAAAkB,QAAA,eACZhB,OAAA,CAACL,GAAG;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACM;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACA,CACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}