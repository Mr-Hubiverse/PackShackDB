const { exec } = require('child_process');
const path = require('path');

// Ensure `fpcalc` is installed on the system (Chromaprint tool)
const FPCALC_BINARY = 'fpcalc'; // You might need to update this if `fpcalc` is not in your PATH

/**
 * Generate a Chromaprint fingerprint for an audio file
 * @param {string} filePath - Path to the audio file
 * @returns {Promise<string>} - A promise that resolves to the fingerprint
 */
function generateFingerprint(filePath) {
  return new Promise((resolve, reject) => {
    const command = `${FPCALC_BINARY} -json "${filePath}"`;

    exec(command, (error, stdout, stderr) => {
      if (error) {
        reject(new Error(`Error executing fpcalc: ${stderr || error.message}`));
        return;
      }

      try {
        const result = JSON.parse(stdout);
        if (result && result.fingerprint) {
          resolve(result.fingerprint);
        } else {
          reject(new Error('No fingerprint found in fpcalc output.'));
        }
      } catch (err) {
        reject(new Error(`Error parsing fpcalc output: ${err.message}`));
      }
    });
  });
}

/**
 * Check if a file exists and is supported
 * @param {string} filePath - Path to the audio file
 * @returns {boolean} - Returns true if file exists and has a valid extension
 */
function isSupportedFile(filePath) {
  const validExtensions = ['.mp3', '.wav', '.flac', '.aac', '.ogg', '.m4a'];
  const fileExtension = path.extname(filePath).toLowerCase();

  return validExtensions.includes(fileExtension);
}

module.exports = {
  generateFingerprint,
  isSupportedFile,
};
